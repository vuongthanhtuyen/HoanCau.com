using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the BaiViet class.
	/// </summary>
    [Serializable]
	public partial class BaiVietCollection : ActiveList<BaiViet, BaiVietCollection>
	{	   
		public BaiVietCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>BaiVietCollection</returns>
		public BaiVietCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                BaiViet o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the BaiViet table.
	/// </summary>
	[Serializable]
	public partial class BaiViet : ActiveRecord<BaiViet>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public BaiViet()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public BaiViet(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public BaiViet(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public BaiViet(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BaiViet", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarTieuDe = new TableSchema.TableColumn(schema);
				colvarTieuDe.ColumnName = "TieuDe";
				colvarTieuDe.DataType = DbType.String;
				colvarTieuDe.MaxLength = 1000;
				colvarTieuDe.AutoIncrement = false;
				colvarTieuDe.IsNullable = false;
				colvarTieuDe.IsPrimaryKey = false;
				colvarTieuDe.IsForeignKey = false;
				colvarTieuDe.IsReadOnly = false;
				colvarTieuDe.DefaultSetting = @"";
				colvarTieuDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTieuDe);
				
				TableSchema.TableColumn colvarSlug = new TableSchema.TableColumn(schema);
				colvarSlug.ColumnName = "Slug";
				colvarSlug.DataType = DbType.AnsiString;
				colvarSlug.MaxLength = 1000;
				colvarSlug.AutoIncrement = false;
				colvarSlug.IsNullable = false;
				colvarSlug.IsPrimaryKey = false;
				colvarSlug.IsForeignKey = false;
				colvarSlug.IsReadOnly = false;
				colvarSlug.DefaultSetting = @"";
				colvarSlug.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlug);
				
				TableSchema.TableColumn colvarMoTaNgan = new TableSchema.TableColumn(schema);
				colvarMoTaNgan.ColumnName = "MoTaNgan";
				colvarMoTaNgan.DataType = DbType.String;
				colvarMoTaNgan.MaxLength = 2000;
				colvarMoTaNgan.AutoIncrement = false;
				colvarMoTaNgan.IsNullable = false;
				colvarMoTaNgan.IsPrimaryKey = false;
				colvarMoTaNgan.IsForeignKey = false;
				colvarMoTaNgan.IsReadOnly = false;
				colvarMoTaNgan.DefaultSetting = @"";
				colvarMoTaNgan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTaNgan);
				
				TableSchema.TableColumn colvarNoiDungChinh = new TableSchema.TableColumn(schema);
				colvarNoiDungChinh.ColumnName = "NoiDungChinh";
				colvarNoiDungChinh.DataType = DbType.String;
				colvarNoiDungChinh.MaxLength = -1;
				colvarNoiDungChinh.AutoIncrement = false;
				colvarNoiDungChinh.IsNullable = false;
				colvarNoiDungChinh.IsPrimaryKey = false;
				colvarNoiDungChinh.IsForeignKey = false;
				colvarNoiDungChinh.IsReadOnly = false;
				colvarNoiDungChinh.DefaultSetting = @"";
				colvarNoiDungChinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDungChinh);
				
				TableSchema.TableColumn colvarTacGiaId = new TableSchema.TableColumn(schema);
				colvarTacGiaId.ColumnName = "TacGiaId";
				colvarTacGiaId.DataType = DbType.Int32;
				colvarTacGiaId.MaxLength = 0;
				colvarTacGiaId.AutoIncrement = false;
				colvarTacGiaId.IsNullable = true;
				colvarTacGiaId.IsPrimaryKey = false;
				colvarTacGiaId.IsForeignKey = true;
				colvarTacGiaId.IsReadOnly = false;
				colvarTacGiaId.DefaultSetting = @"";
				
					colvarTacGiaId.ForeignKeyTableName = "NguoiDung";
				schema.Columns.Add(colvarTacGiaId);
				
				TableSchema.TableColumn colvarViewCount = new TableSchema.TableColumn(schema);
				colvarViewCount.ColumnName = "ViewCount";
				colvarViewCount.DataType = DbType.Int32;
				colvarViewCount.MaxLength = 0;
				colvarViewCount.AutoIncrement = false;
				colvarViewCount.IsNullable = true;
				colvarViewCount.IsPrimaryKey = false;
				colvarViewCount.IsForeignKey = false;
				colvarViewCount.IsReadOnly = false;
				
						colvarViewCount.DefaultSetting = @"((0))";
				colvarViewCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewCount);
				
				TableSchema.TableColumn colvarThumbnailUrl = new TableSchema.TableColumn(schema);
				colvarThumbnailUrl.ColumnName = "ThumbnailUrl";
				colvarThumbnailUrl.DataType = DbType.AnsiString;
				colvarThumbnailUrl.MaxLength = 500;
				colvarThumbnailUrl.AutoIncrement = false;
				colvarThumbnailUrl.IsNullable = true;
				colvarThumbnailUrl.IsPrimaryKey = false;
				colvarThumbnailUrl.IsForeignKey = false;
				colvarThumbnailUrl.IsReadOnly = false;
				colvarThumbnailUrl.DefaultSetting = @"";
				colvarThumbnailUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThumbnailUrl);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NgayTao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarChinhSuaGanNhat = new TableSchema.TableColumn(schema);
				colvarChinhSuaGanNhat.ColumnName = "ChinhSuaGanNhat";
				colvarChinhSuaGanNhat.DataType = DbType.DateTime;
				colvarChinhSuaGanNhat.MaxLength = 0;
				colvarChinhSuaGanNhat.AutoIncrement = false;
				colvarChinhSuaGanNhat.IsNullable = true;
				colvarChinhSuaGanNhat.IsPrimaryKey = false;
				colvarChinhSuaGanNhat.IsForeignKey = false;
				colvarChinhSuaGanNhat.IsReadOnly = false;
				
						colvarChinhSuaGanNhat.DefaultSetting = @"(getdate())";
				colvarChinhSuaGanNhat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChinhSuaGanNhat);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.Boolean;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((1))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("BaiViet",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("TieuDe")]
		[Bindable(true)]
		public string TieuDe 
		{
			get { return GetColumnValue<string>(Columns.TieuDe); }
			set { SetColumnValue(Columns.TieuDe, value); }
		}
		  
		[XmlAttribute("Slug")]
		[Bindable(true)]
		public string Slug 
		{
			get { return GetColumnValue<string>(Columns.Slug); }
			set { SetColumnValue(Columns.Slug, value); }
		}
		  
		[XmlAttribute("MoTaNgan")]
		[Bindable(true)]
		public string MoTaNgan 
		{
			get { return GetColumnValue<string>(Columns.MoTaNgan); }
			set { SetColumnValue(Columns.MoTaNgan, value); }
		}
		  
		[XmlAttribute("NoiDungChinh")]
		[Bindable(true)]
		public string NoiDungChinh 
		{
			get { return GetColumnValue<string>(Columns.NoiDungChinh); }
			set { SetColumnValue(Columns.NoiDungChinh, value); }
		}
		  
		[XmlAttribute("TacGiaId")]
		[Bindable(true)]
		public int? TacGiaId 
		{
			get { return GetColumnValue<int?>(Columns.TacGiaId); }
			set { SetColumnValue(Columns.TacGiaId, value); }
		}
		  
		[XmlAttribute("ViewCount")]
		[Bindable(true)]
		public int? ViewCount 
		{
			get { return GetColumnValue<int?>(Columns.ViewCount); }
			set { SetColumnValue(Columns.ViewCount, value); }
		}
		  
		[XmlAttribute("ThumbnailUrl")]
		[Bindable(true)]
		public string ThumbnailUrl 
		{
			get { return GetColumnValue<string>(Columns.ThumbnailUrl); }
			set { SetColumnValue(Columns.ThumbnailUrl, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("ChinhSuaGanNhat")]
		[Bindable(true)]
		public DateTime? ChinhSuaGanNhat 
		{
			get { return GetColumnValue<DateTime?>(Columns.ChinhSuaGanNhat); }
			set { SetColumnValue(Columns.ChinhSuaGanNhat, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public bool? TrangThai 
		{
			get { return GetColumnValue<bool?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetCMS.DataAccess.NhomBaiVietCollection colNhomBaiVietRecords;
		public SweetCMS.DataAccess.NhomBaiVietCollection NhomBaiVietRecords()
		{
			if(colNhomBaiVietRecords == null)
			{
				colNhomBaiVietRecords = new SweetCMS.DataAccess.NhomBaiVietCollection().Where(NhomBaiViet.Columns.BaiVietId, Id).Load();
				colNhomBaiVietRecords.ListChanged += new ListChangedEventHandler(colNhomBaiVietRecords_ListChanged);
			}
			return colNhomBaiVietRecords;
		}
				
		void colNhomBaiVietRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colNhomBaiVietRecords[e.NewIndex].BaiVietId = Id;
            }
		}
		private SweetCMS.DataAccess.NhomHinhAnhCollection colNhomHinhAnhRecords;
		public SweetCMS.DataAccess.NhomHinhAnhCollection NhomHinhAnhRecords()
		{
			if(colNhomHinhAnhRecords == null)
			{
				colNhomHinhAnhRecords = new SweetCMS.DataAccess.NhomHinhAnhCollection().Where(NhomHinhAnh.Columns.BaiVietId, Id).Load();
				colNhomHinhAnhRecords.ListChanged += new ListChangedEventHandler(colNhomHinhAnhRecords_ListChanged);
			}
			return colNhomHinhAnhRecords;
		}
				
		void colNhomHinhAnhRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colNhomHinhAnhRecords[e.NewIndex].BaiVietId = Id;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a NguoiDung ActiveRecord object related to this BaiViet
		/// 
		/// </summary>
		public SweetCMS.DataAccess.NguoiDung NguoiDung
		{
			get { return SweetCMS.DataAccess.NguoiDung.FetchByID(this.TacGiaId); }
			set { SetColumnValue("TacGiaId", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varTieuDe,string varSlug,string varMoTaNgan,string varNoiDungChinh,int? varTacGiaId,int? varViewCount,string varThumbnailUrl,DateTime? varNgayTao,DateTime? varChinhSuaGanNhat,bool? varTrangThai)
		{
			BaiViet item = new BaiViet();
			
			item.TieuDe = varTieuDe;
			
			item.Slug = varSlug;
			
			item.MoTaNgan = varMoTaNgan;
			
			item.NoiDungChinh = varNoiDungChinh;
			
			item.TacGiaId = varTacGiaId;
			
			item.ViewCount = varViewCount;
			
			item.ThumbnailUrl = varThumbnailUrl;
			
			item.NgayTao = varNgayTao;
			
			item.ChinhSuaGanNhat = varChinhSuaGanNhat;
			
			item.TrangThai = varTrangThai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varTieuDe,string varSlug,string varMoTaNgan,string varNoiDungChinh,int? varTacGiaId,int? varViewCount,string varThumbnailUrl,DateTime? varNgayTao,DateTime? varChinhSuaGanNhat,bool? varTrangThai)
		{
			BaiViet item = new BaiViet();
			
				item.Id = varId;
			
				item.TieuDe = varTieuDe;
			
				item.Slug = varSlug;
			
				item.MoTaNgan = varMoTaNgan;
			
				item.NoiDungChinh = varNoiDungChinh;
			
				item.TacGiaId = varTacGiaId;
			
				item.ViewCount = varViewCount;
			
				item.ThumbnailUrl = varThumbnailUrl;
			
				item.NgayTao = varNgayTao;
			
				item.ChinhSuaGanNhat = varChinhSuaGanNhat;
			
				item.TrangThai = varTrangThai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TieuDeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SlugColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaNganColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungChinhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TacGiaIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewCountColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ThumbnailUrlColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ChinhSuaGanNhatColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string TieuDe = @"TieuDe";
			 public static string Slug = @"Slug";
			 public static string MoTaNgan = @"MoTaNgan";
			 public static string NoiDungChinh = @"NoiDungChinh";
			 public static string TacGiaId = @"TacGiaId";
			 public static string ViewCount = @"ViewCount";
			 public static string ThumbnailUrl = @"ThumbnailUrl";
			 public static string NgayTao = @"NgayTao";
			 public static string ChinhSuaGanNhat = @"ChinhSuaGanNhat";
			 public static string TrangThai = @"TrangThai";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colNhomBaiVietRecords != null)
                {
                    foreach (SweetCMS.DataAccess.NhomBaiViet item in colNhomBaiVietRecords)
                    {
                        if (item.BaiVietId != Id)
                        {
                            item.BaiVietId = Id;
                        }
                    }
               }
		
                if (colNhomHinhAnhRecords != null)
                {
                    foreach (SweetCMS.DataAccess.NhomHinhAnh item in colNhomHinhAnhRecords)
                    {
                        if (item.BaiVietId != Id)
                        {
                            item.BaiVietId = Id;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colNhomBaiVietRecords != null)
                {
                    colNhomBaiVietRecords.SaveAll();
               }
		
                if (colNhomHinhAnhRecords != null)
                {
                    colNhomHinhAnhRecords.SaveAll();
               }
		}
        #endregion
	}
}
