using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the NganhDaoTao class.
	/// </summary>
    [Serializable]
	public partial class NganhDaoTaoCollection : ActiveList<NganhDaoTao, NganhDaoTaoCollection>
	{	   
		public NganhDaoTaoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>NganhDaoTaoCollection</returns>
		public NganhDaoTaoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                NganhDaoTao o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the NganhDaoTao table.
	/// </summary>
	[Serializable]
	public partial class NganhDaoTao : ActiveRecord<NganhDaoTao>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public NganhDaoTao()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public NganhDaoTao(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public NganhDaoTao(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public NganhDaoTao(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("NganhDaoTao", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMaNganh = new TableSchema.TableColumn(schema);
				colvarMaNganh.ColumnName = "MaNganh";
				colvarMaNganh.DataType = DbType.AnsiString;
				colvarMaNganh.MaxLength = 20;
				colvarMaNganh.AutoIncrement = false;
				colvarMaNganh.IsNullable = false;
				colvarMaNganh.IsPrimaryKey = false;
				colvarMaNganh.IsForeignKey = false;
				colvarMaNganh.IsReadOnly = false;
				colvarMaNganh.DefaultSetting = @"";
				colvarMaNganh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaNganh);
				
				TableSchema.TableColumn colvarTenNganh = new TableSchema.TableColumn(schema);
				colvarTenNganh.ColumnName = "TenNganh";
				colvarTenNganh.DataType = DbType.String;
				colvarTenNganh.MaxLength = 500;
				colvarTenNganh.AutoIncrement = false;
				colvarTenNganh.IsNullable = false;
				colvarTenNganh.IsPrimaryKey = false;
				colvarTenNganh.IsForeignKey = false;
				colvarTenNganh.IsReadOnly = false;
				colvarTenNganh.DefaultSetting = @"";
				colvarTenNganh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenNganh);
				
				TableSchema.TableColumn colvarSoNamDaoTao = new TableSchema.TableColumn(schema);
				colvarSoNamDaoTao.ColumnName = "SoNamDaoTao";
				colvarSoNamDaoTao.DataType = DbType.String;
				colvarSoNamDaoTao.MaxLength = 50;
				colvarSoNamDaoTao.AutoIncrement = false;
				colvarSoNamDaoTao.IsNullable = false;
				colvarSoNamDaoTao.IsPrimaryKey = false;
				colvarSoNamDaoTao.IsForeignKey = false;
				colvarSoNamDaoTao.IsReadOnly = false;
				colvarSoNamDaoTao.DefaultSetting = @"";
				colvarSoNamDaoTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoNamDaoTao);
				
				TableSchema.TableColumn colvarMoTaNgan = new TableSchema.TableColumn(schema);
				colvarMoTaNgan.ColumnName = "MoTaNgan";
				colvarMoTaNgan.DataType = DbType.String;
				colvarMoTaNgan.MaxLength = 1000;
				colvarMoTaNgan.AutoIncrement = false;
				colvarMoTaNgan.IsNullable = true;
				colvarMoTaNgan.IsPrimaryKey = false;
				colvarMoTaNgan.IsForeignKey = false;
				colvarMoTaNgan.IsReadOnly = false;
				colvarMoTaNgan.DefaultSetting = @"";
				colvarMoTaNgan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTaNgan);
				
				TableSchema.TableColumn colvarNoiDung = new TableSchema.TableColumn(schema);
				colvarNoiDung.ColumnName = "NoiDung";
				colvarNoiDung.DataType = DbType.String;
				colvarNoiDung.MaxLength = -1;
				colvarNoiDung.AutoIncrement = false;
				colvarNoiDung.IsNullable = false;
				colvarNoiDung.IsPrimaryKey = false;
				colvarNoiDung.IsForeignKey = false;
				colvarNoiDung.IsReadOnly = false;
				colvarNoiDung.DefaultSetting = @"";
				colvarNoiDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDung);
				
				TableSchema.TableColumn colvarSoTinChi = new TableSchema.TableColumn(schema);
				colvarSoTinChi.ColumnName = "SoTinChi";
				colvarSoTinChi.DataType = DbType.Int32;
				colvarSoTinChi.MaxLength = 0;
				colvarSoTinChi.AutoIncrement = false;
				colvarSoTinChi.IsNullable = false;
				colvarSoTinChi.IsPrimaryKey = false;
				colvarSoTinChi.IsForeignKey = false;
				colvarSoTinChi.IsReadOnly = false;
				colvarSoTinChi.DefaultSetting = @"";
				colvarSoTinChi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoTinChi);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "CreateBy";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 100;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = false;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarUpdateBy = new TableSchema.TableColumn(schema);
				colvarUpdateBy.ColumnName = "UpdateBy";
				colvarUpdateBy.DataType = DbType.String;
				colvarUpdateBy.MaxLength = 100;
				colvarUpdateBy.AutoIncrement = false;
				colvarUpdateBy.IsNullable = false;
				colvarUpdateBy.IsPrimaryKey = false;
				colvarUpdateBy.IsForeignKey = false;
				colvarUpdateBy.IsReadOnly = false;
				colvarUpdateBy.DefaultSetting = @"";
				colvarUpdateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdateBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "CreateDate";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = false;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				
						colvarCreateDate.DefaultSetting = @"(getdate())";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarUpdateDate = new TableSchema.TableColumn(schema);
				colvarUpdateDate.ColumnName = "UpdateDate";
				colvarUpdateDate.DataType = DbType.DateTime;
				colvarUpdateDate.MaxLength = 0;
				colvarUpdateDate.AutoIncrement = false;
				colvarUpdateDate.IsNullable = false;
				colvarUpdateDate.IsPrimaryKey = false;
				colvarUpdateDate.IsForeignKey = false;
				colvarUpdateDate.IsReadOnly = false;
				
						colvarUpdateDate.DefaultSetting = @"(getdate())";
				colvarUpdateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdateDate);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.AnsiString;
				colvarStatus.MaxLength = 20;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				
						colvarStatus.DefaultSetting = @"('Active')";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarNhomNganh = new TableSchema.TableColumn(schema);
				colvarNhomNganh.ColumnName = "NhomNganh";
				colvarNhomNganh.DataType = DbType.Int32;
				colvarNhomNganh.MaxLength = 0;
				colvarNhomNganh.AutoIncrement = false;
				colvarNhomNganh.IsNullable = false;
				colvarNhomNganh.IsPrimaryKey = false;
				colvarNhomNganh.IsForeignKey = false;
				colvarNhomNganh.IsReadOnly = false;
				
						colvarNhomNganh.DefaultSetting = @"((0))";
				colvarNhomNganh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhomNganh);
				
				TableSchema.TableColumn colvarDieuKienNhapHoc = new TableSchema.TableColumn(schema);
				colvarDieuKienNhapHoc.ColumnName = "DieuKienNhapHoc";
				colvarDieuKienNhapHoc.DataType = DbType.String;
				colvarDieuKienNhapHoc.MaxLength = 500;
				colvarDieuKienNhapHoc.AutoIncrement = false;
				colvarDieuKienNhapHoc.IsNullable = false;
				colvarDieuKienNhapHoc.IsPrimaryKey = false;
				colvarDieuKienNhapHoc.IsForeignKey = false;
				colvarDieuKienNhapHoc.IsReadOnly = false;
				colvarDieuKienNhapHoc.DefaultSetting = @"";
				colvarDieuKienNhapHoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDieuKienNhapHoc);
				
				TableSchema.TableColumn colvarHocPhi = new TableSchema.TableColumn(schema);
				colvarHocPhi.ColumnName = "HocPhi";
				colvarHocPhi.DataType = DbType.String;
				colvarHocPhi.MaxLength = 255;
				colvarHocPhi.AutoIncrement = false;
				colvarHocPhi.IsNullable = false;
				colvarHocPhi.IsPrimaryKey = false;
				colvarHocPhi.IsForeignKey = false;
				colvarHocPhi.IsReadOnly = false;
				colvarHocPhi.DefaultSetting = @"";
				colvarHocPhi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHocPhi);
				
				TableSchema.TableColumn colvarThumbnailUrl = new TableSchema.TableColumn(schema);
				colvarThumbnailUrl.ColumnName = "ThumbnailUrl";
				colvarThumbnailUrl.DataType = DbType.AnsiString;
				colvarThumbnailUrl.MaxLength = 500;
				colvarThumbnailUrl.AutoIncrement = false;
				colvarThumbnailUrl.IsNullable = false;
				colvarThumbnailUrl.IsPrimaryKey = false;
				colvarThumbnailUrl.IsForeignKey = false;
				colvarThumbnailUrl.IsReadOnly = false;
				
						colvarThumbnailUrl.DefaultSetting = @"('')";
				colvarThumbnailUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThumbnailUrl);
				
				TableSchema.TableColumn colvarSlug = new TableSchema.TableColumn(schema);
				colvarSlug.ColumnName = "Slug";
				colvarSlug.DataType = DbType.AnsiString;
				colvarSlug.MaxLength = 500;
				colvarSlug.AutoIncrement = false;
				colvarSlug.IsNullable = false;
				colvarSlug.IsPrimaryKey = false;
				colvarSlug.IsForeignKey = false;
				colvarSlug.IsReadOnly = false;
				
						colvarSlug.DefaultSetting = @"('')";
				colvarSlug.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlug);
				
				TableSchema.TableColumn colvarDisplayOrder = new TableSchema.TableColumn(schema);
				colvarDisplayOrder.ColumnName = "DisplayOrder";
				colvarDisplayOrder.DataType = DbType.Int32;
				colvarDisplayOrder.MaxLength = 0;
				colvarDisplayOrder.AutoIncrement = false;
				colvarDisplayOrder.IsNullable = false;
				colvarDisplayOrder.IsPrimaryKey = false;
				colvarDisplayOrder.IsForeignKey = false;
				colvarDisplayOrder.IsReadOnly = false;
				
						colvarDisplayOrder.DefaultSetting = @"((-1))";
				colvarDisplayOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayOrder);
				
				TableSchema.TableColumn colvarViewCount = new TableSchema.TableColumn(schema);
				colvarViewCount.ColumnName = "ViewCount";
				colvarViewCount.DataType = DbType.Int32;
				colvarViewCount.MaxLength = 0;
				colvarViewCount.AutoIncrement = false;
				colvarViewCount.IsNullable = false;
				colvarViewCount.IsPrimaryKey = false;
				colvarViewCount.IsForeignKey = false;
				colvarViewCount.IsReadOnly = false;
				
						colvarViewCount.DefaultSetting = @"((0))";
				colvarViewCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewCount);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("NganhDaoTao",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("MaNganh")]
		[Bindable(true)]
		public string MaNganh 
		{
			get { return GetColumnValue<string>(Columns.MaNganh); }
			set { SetColumnValue(Columns.MaNganh, value); }
		}
		  
		[XmlAttribute("TenNganh")]
		[Bindable(true)]
		public string TenNganh 
		{
			get { return GetColumnValue<string>(Columns.TenNganh); }
			set { SetColumnValue(Columns.TenNganh, value); }
		}
		  
		[XmlAttribute("SoNamDaoTao")]
		[Bindable(true)]
		public string SoNamDaoTao 
		{
			get { return GetColumnValue<string>(Columns.SoNamDaoTao); }
			set { SetColumnValue(Columns.SoNamDaoTao, value); }
		}
		  
		[XmlAttribute("MoTaNgan")]
		[Bindable(true)]
		public string MoTaNgan 
		{
			get { return GetColumnValue<string>(Columns.MoTaNgan); }
			set { SetColumnValue(Columns.MoTaNgan, value); }
		}
		  
		[XmlAttribute("NoiDung")]
		[Bindable(true)]
		public string NoiDung 
		{
			get { return GetColumnValue<string>(Columns.NoiDung); }
			set { SetColumnValue(Columns.NoiDung, value); }
		}
		  
		[XmlAttribute("SoTinChi")]
		[Bindable(true)]
		public int SoTinChi 
		{
			get { return GetColumnValue<int>(Columns.SoTinChi); }
			set { SetColumnValue(Columns.SoTinChi, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("UpdateBy")]
		[Bindable(true)]
		public string UpdateBy 
		{
			get { return GetColumnValue<string>(Columns.UpdateBy); }
			set { SetColumnValue(Columns.UpdateBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime CreateDate 
		{
			get { return GetColumnValue<DateTime>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("UpdateDate")]
		[Bindable(true)]
		public DateTime UpdateDate 
		{
			get { return GetColumnValue<DateTime>(Columns.UpdateDate); }
			set { SetColumnValue(Columns.UpdateDate, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("NhomNganh")]
		[Bindable(true)]
		public int NhomNganh 
		{
			get { return GetColumnValue<int>(Columns.NhomNganh); }
			set { SetColumnValue(Columns.NhomNganh, value); }
		}
		  
		[XmlAttribute("DieuKienNhapHoc")]
		[Bindable(true)]
		public string DieuKienNhapHoc 
		{
			get { return GetColumnValue<string>(Columns.DieuKienNhapHoc); }
			set { SetColumnValue(Columns.DieuKienNhapHoc, value); }
		}
		  
		[XmlAttribute("HocPhi")]
		[Bindable(true)]
		public string HocPhi 
		{
			get { return GetColumnValue<string>(Columns.HocPhi); }
			set { SetColumnValue(Columns.HocPhi, value); }
		}
		  
		[XmlAttribute("ThumbnailUrl")]
		[Bindable(true)]
		public string ThumbnailUrl 
		{
			get { return GetColumnValue<string>(Columns.ThumbnailUrl); }
			set { SetColumnValue(Columns.ThumbnailUrl, value); }
		}
		  
		[XmlAttribute("Slug")]
		[Bindable(true)]
		public string Slug 
		{
			get { return GetColumnValue<string>(Columns.Slug); }
			set { SetColumnValue(Columns.Slug, value); }
		}
		  
		[XmlAttribute("DisplayOrder")]
		[Bindable(true)]
		public int DisplayOrder 
		{
			get { return GetColumnValue<int>(Columns.DisplayOrder); }
			set { SetColumnValue(Columns.DisplayOrder, value); }
		}
		  
		[XmlAttribute("ViewCount")]
		[Bindable(true)]
		public int ViewCount 
		{
			get { return GetColumnValue<int>(Columns.ViewCount); }
			set { SetColumnValue(Columns.ViewCount, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaNganh,string varTenNganh,string varSoNamDaoTao,string varMoTaNgan,string varNoiDung,int varSoTinChi,string varCreateBy,string varUpdateBy,DateTime varCreateDate,DateTime varUpdateDate,string varStatus,int varNhomNganh,string varDieuKienNhapHoc,string varHocPhi,string varThumbnailUrl,string varSlug,int varDisplayOrder,int varViewCount)
		{
			NganhDaoTao item = new NganhDaoTao();
			
			item.MaNganh = varMaNganh;
			
			item.TenNganh = varTenNganh;
			
			item.SoNamDaoTao = varSoNamDaoTao;
			
			item.MoTaNgan = varMoTaNgan;
			
			item.NoiDung = varNoiDung;
			
			item.SoTinChi = varSoTinChi;
			
			item.CreateBy = varCreateBy;
			
			item.UpdateBy = varUpdateBy;
			
			item.CreateDate = varCreateDate;
			
			item.UpdateDate = varUpdateDate;
			
			item.Status = varStatus;
			
			item.NhomNganh = varNhomNganh;
			
			item.DieuKienNhapHoc = varDieuKienNhapHoc;
			
			item.HocPhi = varHocPhi;
			
			item.ThumbnailUrl = varThumbnailUrl;
			
			item.Slug = varSlug;
			
			item.DisplayOrder = varDisplayOrder;
			
			item.ViewCount = varViewCount;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varMaNganh,string varTenNganh,string varSoNamDaoTao,string varMoTaNgan,string varNoiDung,int varSoTinChi,string varCreateBy,string varUpdateBy,DateTime varCreateDate,DateTime varUpdateDate,string varStatus,int varNhomNganh,string varDieuKienNhapHoc,string varHocPhi,string varThumbnailUrl,string varSlug,int varDisplayOrder,int varViewCount)
		{
			NganhDaoTao item = new NganhDaoTao();
			
				item.Id = varId;
			
				item.MaNganh = varMaNganh;
			
				item.TenNganh = varTenNganh;
			
				item.SoNamDaoTao = varSoNamDaoTao;
			
				item.MoTaNgan = varMoTaNgan;
			
				item.NoiDung = varNoiDung;
			
				item.SoTinChi = varSoTinChi;
			
				item.CreateBy = varCreateBy;
			
				item.UpdateBy = varUpdateBy;
			
				item.CreateDate = varCreateDate;
			
				item.UpdateDate = varUpdateDate;
			
				item.Status = varStatus;
			
				item.NhomNganh = varNhomNganh;
			
				item.DieuKienNhapHoc = varDieuKienNhapHoc;
			
				item.HocPhi = varHocPhi;
			
				item.ThumbnailUrl = varThumbnailUrl;
			
				item.Slug = varSlug;
			
				item.DisplayOrder = varDisplayOrder;
			
				item.ViewCount = varViewCount;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaNganhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenNganhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SoNamDaoTaoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaNganColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SoTinChiColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdateByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdateDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NhomNganhColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn DieuKienNhapHocColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn HocPhiColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ThumbnailUrlColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn SlugColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayOrderColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewCountColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string MaNganh = @"MaNganh";
			 public static string TenNganh = @"TenNganh";
			 public static string SoNamDaoTao = @"SoNamDaoTao";
			 public static string MoTaNgan = @"MoTaNgan";
			 public static string NoiDung = @"NoiDung";
			 public static string SoTinChi = @"SoTinChi";
			 public static string CreateBy = @"CreateBy";
			 public static string UpdateBy = @"UpdateBy";
			 public static string CreateDate = @"CreateDate";
			 public static string UpdateDate = @"UpdateDate";
			 public static string Status = @"Status";
			 public static string NhomNganh = @"NhomNganh";
			 public static string DieuKienNhapHoc = @"DieuKienNhapHoc";
			 public static string HocPhi = @"HocPhi";
			 public static string ThumbnailUrl = @"ThumbnailUrl";
			 public static string Slug = @"Slug";
			 public static string DisplayOrder = @"DisplayOrder";
			 public static string ViewCount = @"ViewCount";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
