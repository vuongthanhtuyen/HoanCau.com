using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TrinhChieuAnh class.
	/// </summary>
    [Serializable]
	public partial class TrinhChieuAnhCollection : ActiveList<TrinhChieuAnh, TrinhChieuAnhCollection>
	{	   
		public TrinhChieuAnhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TrinhChieuAnhCollection</returns>
		public TrinhChieuAnhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TrinhChieuAnh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TrinhChieuAnh table.
	/// </summary>
	[Serializable]
	public partial class TrinhChieuAnh : ActiveRecord<TrinhChieuAnh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TrinhChieuAnh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TrinhChieuAnh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TrinhChieuAnh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TrinhChieuAnh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TrinhChieuAnh", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarNoiDungMot = new TableSchema.TableColumn(schema);
				colvarNoiDungMot.ColumnName = "NoiDungMot";
				colvarNoiDungMot.DataType = DbType.String;
				colvarNoiDungMot.MaxLength = 300;
				colvarNoiDungMot.AutoIncrement = false;
				colvarNoiDungMot.IsNullable = false;
				colvarNoiDungMot.IsPrimaryKey = false;
				colvarNoiDungMot.IsForeignKey = false;
				colvarNoiDungMot.IsReadOnly = false;
				colvarNoiDungMot.DefaultSetting = @"";
				colvarNoiDungMot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDungMot);
				
				TableSchema.TableColumn colvarNoiDungHai = new TableSchema.TableColumn(schema);
				colvarNoiDungHai.ColumnName = "NoiDungHai";
				colvarNoiDungHai.DataType = DbType.String;
				colvarNoiDungHai.MaxLength = 300;
				colvarNoiDungHai.AutoIncrement = false;
				colvarNoiDungHai.IsNullable = false;
				colvarNoiDungHai.IsPrimaryKey = false;
				colvarNoiDungHai.IsForeignKey = false;
				colvarNoiDungHai.IsReadOnly = false;
				colvarNoiDungHai.DefaultSetting = @"";
				colvarNoiDungHai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDungHai);
				
				TableSchema.TableColumn colvarHinhAnhUrl = new TableSchema.TableColumn(schema);
				colvarHinhAnhUrl.ColumnName = "HinhAnhUrl";
				colvarHinhAnhUrl.DataType = DbType.AnsiString;
				colvarHinhAnhUrl.MaxLength = 500;
				colvarHinhAnhUrl.AutoIncrement = false;
				colvarHinhAnhUrl.IsNullable = false;
				colvarHinhAnhUrl.IsPrimaryKey = false;
				colvarHinhAnhUrl.IsForeignKey = false;
				colvarHinhAnhUrl.IsReadOnly = false;
				colvarHinhAnhUrl.DefaultSetting = @"";
				colvarHinhAnhUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHinhAnhUrl);
				
				TableSchema.TableColumn colvarLienKetUrl = new TableSchema.TableColumn(schema);
				colvarLienKetUrl.ColumnName = "LienKetUrl";
				colvarLienKetUrl.DataType = DbType.AnsiString;
				colvarLienKetUrl.MaxLength = 500;
				colvarLienKetUrl.AutoIncrement = false;
				colvarLienKetUrl.IsNullable = true;
				colvarLienKetUrl.IsPrimaryKey = false;
				colvarLienKetUrl.IsForeignKey = false;
				colvarLienKetUrl.IsReadOnly = false;
				colvarLienKetUrl.DefaultSetting = @"";
				colvarLienKetUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLienKetUrl);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.Boolean;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((1))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NgayTao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "Stt";
				colvarStt.DataType = DbType.Int32;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("TrinhChieuAnh",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("NoiDungMot")]
		[Bindable(true)]
		public string NoiDungMot 
		{
			get { return GetColumnValue<string>(Columns.NoiDungMot); }
			set { SetColumnValue(Columns.NoiDungMot, value); }
		}
		  
		[XmlAttribute("NoiDungHai")]
		[Bindable(true)]
		public string NoiDungHai 
		{
			get { return GetColumnValue<string>(Columns.NoiDungHai); }
			set { SetColumnValue(Columns.NoiDungHai, value); }
		}
		  
		[XmlAttribute("HinhAnhUrl")]
		[Bindable(true)]
		public string HinhAnhUrl 
		{
			get { return GetColumnValue<string>(Columns.HinhAnhUrl); }
			set { SetColumnValue(Columns.HinhAnhUrl, value); }
		}
		  
		[XmlAttribute("LienKetUrl")]
		[Bindable(true)]
		public string LienKetUrl 
		{
			get { return GetColumnValue<string>(Columns.LienKetUrl); }
			set { SetColumnValue(Columns.LienKetUrl, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public bool? TrangThai 
		{
			get { return GetColumnValue<bool?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public int? Stt 
		{
			get { return GetColumnValue<int?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNoiDungMot,string varNoiDungHai,string varHinhAnhUrl,string varLienKetUrl,bool? varTrangThai,DateTime varNgayTao,int? varStt)
		{
			TrinhChieuAnh item = new TrinhChieuAnh();
			
			item.NoiDungMot = varNoiDungMot;
			
			item.NoiDungHai = varNoiDungHai;
			
			item.HinhAnhUrl = varHinhAnhUrl;
			
			item.LienKetUrl = varLienKetUrl;
			
			item.TrangThai = varTrangThai;
			
			item.NgayTao = varNgayTao;
			
			item.Stt = varStt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varNoiDungMot,string varNoiDungHai,string varHinhAnhUrl,string varLienKetUrl,bool? varTrangThai,DateTime varNgayTao,int? varStt)
		{
			TrinhChieuAnh item = new TrinhChieuAnh();
			
				item.Id = varId;
			
				item.NoiDungMot = varNoiDungMot;
			
				item.NoiDungHai = varNoiDungHai;
			
				item.HinhAnhUrl = varHinhAnhUrl;
			
				item.LienKetUrl = varLienKetUrl;
			
				item.TrangThai = varTrangThai;
			
				item.NgayTao = varNgayTao;
			
				item.Stt = varStt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungMotColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungHaiColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HinhAnhUrlColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LienKetUrlColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string NoiDungMot = @"NoiDungMot";
			 public static string NoiDungHai = @"NoiDungHai";
			 public static string HinhAnhUrl = @"HinhAnhUrl";
			 public static string LienKetUrl = @"LienKetUrl";
			 public static string TrangThai = @"TrangThai";
			 public static string NgayTao = @"NgayTao";
			 public static string Stt = @"Stt";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
