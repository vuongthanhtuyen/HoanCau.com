using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the MenuWebDuoi class.
	/// </summary>
    [Serializable]
	public partial class MenuWebDuoiCollection : ActiveList<MenuWebDuoi, MenuWebDuoiCollection>
	{	   
		public MenuWebDuoiCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MenuWebDuoiCollection</returns>
		public MenuWebDuoiCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                MenuWebDuoi o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the MenuWebDuoi table.
	/// </summary>
	[Serializable]
	public partial class MenuWebDuoi : ActiveRecord<MenuWebDuoi>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public MenuWebDuoi()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public MenuWebDuoi(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public MenuWebDuoi(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public MenuWebDuoi(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MenuWebDuoi", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarTen = new TableSchema.TableColumn(schema);
				colvarTen.ColumnName = "Ten";
				colvarTen.DataType = DbType.String;
				colvarTen.MaxLength = 500;
				colvarTen.AutoIncrement = false;
				colvarTen.IsNullable = true;
				colvarTen.IsPrimaryKey = false;
				colvarTen.IsForeignKey = false;
				colvarTen.IsReadOnly = false;
				colvarTen.DefaultSetting = @"";
				colvarTen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTen);
				
				TableSchema.TableColumn colvarMenuChaId = new TableSchema.TableColumn(schema);
				colvarMenuChaId.ColumnName = "MenuChaId";
				colvarMenuChaId.DataType = DbType.Int32;
				colvarMenuChaId.MaxLength = 0;
				colvarMenuChaId.AutoIncrement = false;
				colvarMenuChaId.IsNullable = true;
				colvarMenuChaId.IsPrimaryKey = false;
				colvarMenuChaId.IsForeignKey = false;
				colvarMenuChaId.IsReadOnly = false;
				colvarMenuChaId.DefaultSetting = @"";
				colvarMenuChaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuChaId);
				
				TableSchema.TableColumn colvarSlug = new TableSchema.TableColumn(schema);
				colvarSlug.ColumnName = "Slug";
				colvarSlug.DataType = DbType.AnsiString;
				colvarSlug.MaxLength = 500;
				colvarSlug.AutoIncrement = false;
				colvarSlug.IsNullable = true;
				colvarSlug.IsPrimaryKey = false;
				colvarSlug.IsForeignKey = false;
				colvarSlug.IsReadOnly = false;
				colvarSlug.DefaultSetting = @"";
				colvarSlug.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlug);
				
				TableSchema.TableColumn colvarMoTa = new TableSchema.TableColumn(schema);
				colvarMoTa.ColumnName = "MoTa";
				colvarMoTa.DataType = DbType.String;
				colvarMoTa.MaxLength = 4000;
				colvarMoTa.AutoIncrement = false;
				colvarMoTa.IsNullable = true;
				colvarMoTa.IsPrimaryKey = false;
				colvarMoTa.IsForeignKey = false;
				colvarMoTa.IsReadOnly = false;
				colvarMoTa.DefaultSetting = @"";
				colvarMoTa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTa);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "HienThi";
				colvarHienThi.DataType = DbType.Boolean;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				
						colvarHienThi.DefaultSetting = @"((1))";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "Stt";
				colvarStt.DataType = DbType.Int32;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NgayTao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarLangID = new TableSchema.TableColumn(schema);
				colvarLangID.ColumnName = "LangID";
				colvarLangID.DataType = DbType.Int32;
				colvarLangID.MaxLength = 0;
				colvarLangID.AutoIncrement = false;
				colvarLangID.IsNullable = true;
				colvarLangID.IsPrimaryKey = false;
				colvarLangID.IsForeignKey = false;
				colvarLangID.IsReadOnly = false;
				
						colvarLangID.DefaultSetting = @"((1))";
				colvarLangID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLangID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("MenuWebDuoi",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Ten")]
		[Bindable(true)]
		public string Ten 
		{
			get { return GetColumnValue<string>(Columns.Ten); }
			set { SetColumnValue(Columns.Ten, value); }
		}
		  
		[XmlAttribute("MenuChaId")]
		[Bindable(true)]
		public int? MenuChaId 
		{
			get { return GetColumnValue<int?>(Columns.MenuChaId); }
			set { SetColumnValue(Columns.MenuChaId, value); }
		}
		  
		[XmlAttribute("Slug")]
		[Bindable(true)]
		public string Slug 
		{
			get { return GetColumnValue<string>(Columns.Slug); }
			set { SetColumnValue(Columns.Slug, value); }
		}
		  
		[XmlAttribute("MoTa")]
		[Bindable(true)]
		public string MoTa 
		{
			get { return GetColumnValue<string>(Columns.MoTa); }
			set { SetColumnValue(Columns.MoTa, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public bool HienThi 
		{
			get { return GetColumnValue<bool>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public int? Stt 
		{
			get { return GetColumnValue<int?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("LangID")]
		[Bindable(true)]
		public int? LangID 
		{
			get { return GetColumnValue<int?>(Columns.LangID); }
			set { SetColumnValue(Columns.LangID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varTen,int? varMenuChaId,string varSlug,string varMoTa,bool varHienThi,int? varStt,DateTime varNgayTao,int? varLangID)
		{
			MenuWebDuoi item = new MenuWebDuoi();
			
			item.Ten = varTen;
			
			item.MenuChaId = varMenuChaId;
			
			item.Slug = varSlug;
			
			item.MoTa = varMoTa;
			
			item.HienThi = varHienThi;
			
			item.Stt = varStt;
			
			item.NgayTao = varNgayTao;
			
			item.LangID = varLangID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varTen,int? varMenuChaId,string varSlug,string varMoTa,bool varHienThi,int? varStt,DateTime varNgayTao,int? varLangID)
		{
			MenuWebDuoi item = new MenuWebDuoi();
			
				item.Id = varId;
			
				item.Ten = varTen;
			
				item.MenuChaId = varMenuChaId;
			
				item.Slug = varSlug;
			
				item.MoTa = varMoTa;
			
				item.HienThi = varHienThi;
			
				item.Stt = varStt;
			
				item.NgayTao = varNgayTao;
			
				item.LangID = varLangID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MenuChaIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SlugColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LangIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Ten = @"Ten";
			 public static string MenuChaId = @"MenuChaId";
			 public static string Slug = @"Slug";
			 public static string MoTa = @"MoTa";
			 public static string HienThi = @"HienThi";
			 public static string Stt = @"Stt";
			 public static string NgayTao = @"NgayTao";
			 public static string LangID = @"LangID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
