using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the LichSuHeThong class.
	/// </summary>
    [Serializable]
	public partial class LichSuHeThongCollection : ActiveList<LichSuHeThong, LichSuHeThongCollection>
	{	   
		public LichSuHeThongCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LichSuHeThongCollection</returns>
		public LichSuHeThongCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LichSuHeThong o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the LichSuHeThong table.
	/// </summary>
	[Serializable]
	public partial class LichSuHeThong : ActiveRecord<LichSuHeThong>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LichSuHeThong()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LichSuHeThong(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LichSuHeThong(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LichSuHeThong(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("LichSuHeThong", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NguoiTao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = false;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				
						colvarNguoiTao.DefaultSetting = @"('')";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarHanhDong = new TableSchema.TableColumn(schema);
				colvarHanhDong.ColumnName = "HanhDong";
				colvarHanhDong.DataType = DbType.AnsiString;
				colvarHanhDong.MaxLength = 10;
				colvarHanhDong.AutoIncrement = false;
				colvarHanhDong.IsNullable = false;
				colvarHanhDong.IsPrimaryKey = false;
				colvarHanhDong.IsForeignKey = false;
				colvarHanhDong.IsReadOnly = false;
				
						colvarHanhDong.DefaultSetting = @"('')";
				colvarHanhDong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHanhDong);
				
				TableSchema.TableColumn colvarTenNhom = new TableSchema.TableColumn(schema);
				colvarTenNhom.ColumnName = "TenNhom";
				colvarTenNhom.DataType = DbType.String;
				colvarTenNhom.MaxLength = 100;
				colvarTenNhom.AutoIncrement = false;
				colvarTenNhom.IsNullable = false;
				colvarTenNhom.IsPrimaryKey = false;
				colvarTenNhom.IsForeignKey = false;
				colvarTenNhom.IsReadOnly = false;
				
						colvarTenNhom.DefaultSetting = @"('')";
				colvarTenNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenNhom);
				
				TableSchema.TableColumn colvarTenDoiTuong = new TableSchema.TableColumn(schema);
				colvarTenDoiTuong.ColumnName = "TenDoiTuong";
				colvarTenDoiTuong.DataType = DbType.String;
				colvarTenDoiTuong.MaxLength = 100;
				colvarTenDoiTuong.AutoIncrement = false;
				colvarTenDoiTuong.IsNullable = false;
				colvarTenDoiTuong.IsPrimaryKey = false;
				colvarTenDoiTuong.IsForeignKey = false;
				colvarTenDoiTuong.IsReadOnly = false;
				
						colvarTenDoiTuong.DefaultSetting = @"('')";
				colvarTenDoiTuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenDoiTuong);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "CreateDate";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = false;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				
						colvarCreateDate.DefaultSetting = @"(getdate())";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("LichSuHeThong",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("HanhDong")]
		[Bindable(true)]
		public string HanhDong 
		{
			get { return GetColumnValue<string>(Columns.HanhDong); }
			set { SetColumnValue(Columns.HanhDong, value); }
		}
		  
		[XmlAttribute("TenNhom")]
		[Bindable(true)]
		public string TenNhom 
		{
			get { return GetColumnValue<string>(Columns.TenNhom); }
			set { SetColumnValue(Columns.TenNhom, value); }
		}
		  
		[XmlAttribute("TenDoiTuong")]
		[Bindable(true)]
		public string TenDoiTuong 
		{
			get { return GetColumnValue<string>(Columns.TenDoiTuong); }
			set { SetColumnValue(Columns.TenDoiTuong, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime CreateDate 
		{
			get { return GetColumnValue<DateTime>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNguoiTao,string varHanhDong,string varTenNhom,string varTenDoiTuong,DateTime varCreateDate)
		{
			LichSuHeThong item = new LichSuHeThong();
			
			item.NguoiTao = varNguoiTao;
			
			item.HanhDong = varHanhDong;
			
			item.TenNhom = varTenNhom;
			
			item.TenDoiTuong = varTenDoiTuong;
			
			item.CreateDate = varCreateDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varNguoiTao,string varHanhDong,string varTenNhom,string varTenDoiTuong,DateTime varCreateDate)
		{
			LichSuHeThong item = new LichSuHeThong();
			
				item.Id = varId;
			
				item.NguoiTao = varNguoiTao;
			
				item.HanhDong = varHanhDong;
			
				item.TenNhom = varTenNhom;
			
				item.TenDoiTuong = varTenDoiTuong;
			
				item.CreateDate = varCreateDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn HanhDongColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenNhomColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TenDoiTuongColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string NguoiTao = @"NguoiTao";
			 public static string HanhDong = @"HanhDong";
			 public static string TenNhom = @"TenNhom";
			 public static string TenDoiTuong = @"TenDoiTuong";
			 public static string CreateDate = @"CreateDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
